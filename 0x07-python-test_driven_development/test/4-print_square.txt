“””4-print_square.txt”””

============================
How to apply 4-print_square.py
============================

''print_square(size)'', a function for printing squares, is defined in this module.

The Usage:
-----------------

The ''#'' character is used to print squares. The square's height and breadth are represented by the parameter size.
::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

The function prints nothing if ''size'' is 0.
::

    >>> print_square(0)

The Invalid Sizes:
-------------------------

Size's parameter demands that it be an integer. A TypeError is triggered if not.
::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

''size'' raises a ValueError if it is less than zero.
::

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Keep in mind that type-checking comes first, then value-checking.
::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

There must be at least one supporting argument.
::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

