"""0-add_integer.txt"""

---------------------------------
The Use of 0-add_integer.py
---------------------------------

The function ''add_integer(a, b=98)''
in this module defines an integer addition.

How to Use
--------

The result of calling "add_integer(...)"
is the addition of its two arguments.
That value is equivalent to using the "+" operator
for numbers.
: : 

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

: : 

    >>> add_integer(2, -3)
    -1

The function is compatible with floating-point numbers as well.
: : 

    >>> add_integer(2.0, 3.0)
    5

Keep in mind that casting floats to integers occurs before addition.
: : 

    >>> add_integer(2.9, 0.2)
    2

: : 

    >>> add_integer(-2.9, -0.2)
    -2

You can combine floating point values and non-floating point values.
: : 

    >>> add_integer(2.3, -3)
    -1

The second argument is optional and is set to 98 by default.
: : 

    >>> add_integer(2)
    100

Non-Numbers
------------------------

Both of the arguments must be either integers
or floats in order for "add_integer()" to work.
A TypeError is raised if either parameter
is neither an integer nor a float:
: : 

    >>> add_integer ("hello", 3)
    Traceback (most recent call last):
    TypeError: a integer is required.
: : 

    >>> add_integer (2, "hello")
    Traceback (most recent call last):
    TypeError: b integer is required.
: : 

    >>> add_integer (None)
    Traceback (most recent call last):
    TypeError: a integer is required.

: : 

    >>> add_integer (2.3, None)
    Traceback (most recent call last):
    TypeError: b integer is required.

A TypeError warning is only printed for
the first parameter if both inputs are not integers or floats.
: : 

    >>> add_integer ("hello", "there")
    Traceback (most recent call last):
    TypeError: a integer is required

If infinity is supplied, the function will not succeed.
: : 

    >>> add_integer (float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot translate a float infinity to an integer
     

: : 

    >>> add_integer (2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot translate a float infinity to an integer

And again with NaN numbers.

: : 

    >>> add_integer (float('nan'))
    Traceback (most recent call last):
    ValueError: float NaN cannot be converted to an integer

: : 

    >>> add_integer (2, float('nan'))
    Traceback (most recent call last):
    ValueError: float NaN cannot be converted to an integer
